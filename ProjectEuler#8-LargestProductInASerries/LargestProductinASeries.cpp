#include<iostream>
#include<cstring>
#include<fstream>
using namespace std;

/*
 * The four adjacent digits in the 1000-digit digits that 
 * have the greatest product are 9 × 9 × 8 × 9 = 5832.
 *
 * 73167176531330624919225119674426574742355349194934
 * 96983520312774506326239578318016984801869478851843
 * 85861560789112949495459501737958331952853208805511
 * 12540698747158523863050715693290963295227443043557
 * 66896648950445244523161731856403098711121722383113
 * 62229893423380308135336276614282806444486645238749
 * 30358907296290491560440772390713810515859307960866
 * 70172427121883998797908792274921901699720888093776
 * 65727333001053367881220235421809751254540594752243
 * 52584907711670556013604839586446706324415722155397
 * 53697817977846174064955149290862569321978468622482
 * 83972241375657056057490261407972968652414535100474
 * 82166370484403199890008895243450658541227588666881
 * 16427171479924442928230863465674813919123162824586
 * 17866458359124566529476545682848912883142607690042
 * 24219022671055626321111109370544217506941658960408
 * 07198403850962455444362981230987879927244284909188
 * 84580156166097919133875499200524063689912560717606
 * 05886116467109405077541002256983155200055935729725
 * 71636269561882670428252483600823257530420752963450
 *
 * Find the thirteen adjacent digits in the 1000-digit 
 * digits that have the greatest product. What is the value of this product?
 */
// CALCULATES THE LARGEST 13 ADJACENT  DIGIT PRODUCT IN 1000 DIGIT NUMBER
void insertIntoArray(int arr[]);
long int LargestProductinSeries()
{
	int digits[1000]={0};
	insertIntoArray(digits);
	long int product=1; //MUST BE INITIATED TO ONE SINCE MULTIPLYING
	long int  maxProduct=0;
	int maxDigits[13]; //ARRAY THAT STORES THE 13 DIDIGTS THAT HAVE THE MAX PRODUCT
	for(int i =0;i<(1000-13);i++)
	{
		product=1;
		int zeroFlag=0;
		int temp[13]; //VARIABLE USED TO DETERMINE THE 13 DIGITS WITH MAX PRODUCT
		for(int j=0;j<13;j++)
		{
			temp[j]=digits[i+j];
			if(digits[i+j]==0)
			{
				break;
			}
			product*=digits[i+j];
		}
		if(product > maxProduct && zeroFlag==0)
		{
			maxProduct=product;
			memcpy(maxDigits,temp,sizeof(maxDigits));
			
		}
	}
	/* USED TO DISPLAY THE NUMBERS THAT MAKE THE LARGEST PRODUCT
	for(int i=0;i<13;i++)
	{
		cout<<i<<" : "<<maxDigits[i]<<endl;
	
	}
	*/
	return maxProduct;
	
}
//FUNCTION THAT READS IN 1000 DIGIT NUMBER FROM TXT FILE
void insertIntoArray(int arr[])
{	
	ifstream ifile;
	ifile.open("1000digit.txt");
	char x;
	int i=0;
	while(ifile.good())
	{
		ifile >> x;
		arr[i]=x-'0';
		i++;

	}
	ifile.close();
}

int main()
{
	cout << LargestProductinSeries()<<endl;
	
	unsigned long long int num=0;

	return 0;
}
